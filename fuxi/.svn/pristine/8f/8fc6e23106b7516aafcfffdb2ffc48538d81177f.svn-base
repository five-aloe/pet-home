/**
 * 
 */
package com.zhonglian.fuxi.service.impl;

import static com.zhonglian.jinjufin.support.utils.CommonUtils.isMobile;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.alibaba.dubbo.common.utils.Assert;
import com.zhonglian.douxin.commom.vo.UserAddEnterpriseVo;
import com.zhonglian.douxin.commom.vo.UserAddVo;
import com.zhonglian.douxin.common.entity.CompanyMessage;
import com.zhonglian.douxin.common.entity.User;
import com.zhonglian.douxin.common.enums.RegistrationErrorEnums;
import com.zhonglian.fuxi.dal.mapper.CompanyMessageMapper;
import com.zhonglian.fuxi.dal.mapper.UserMapper;
import com.zhonglian.fuxi.service.UserService;
import com.zhonglian.jinjufin.support.utils.CommonUtils;
import com.zhonglian.jinjufin.support.utils.IdcardUtils;
import com.zhonglian.jinjufin.support.utils.MandoAssert;

/**
 * @author zhangshun
 *
 */
@Service
public class UserServiceimpl implements UserService {
	
	private  static final String FUXI = "FUXI";
	
	@Resource
	private UserMapper mapper;
	
	@Resource
	private CompanyMessageMapper companyMessageMapper;

	
	@Override
	@Transactional
	public void addUser(UserAddVo userAddVo) {
		Assert.notNull(userAddVo.getIdCard(), "身份证号不能为空");
		MandoAssert.isTrue(userAddVo.getAccountRole().size() > 0, "资金账户角色类型不能为空");
		Assert.notNull(userAddVo.getMobile(), "手机号不能为空");
		Assert.notNull(userAddVo.getPassword(), "登陆密码不能为空");
		Assert.notNull(userAddVo.getRealname(), "用户名称不能为空");
		MandoAssert.isTrue(IdcardUtils.validateCard(userAddVo.getIdCard()), "身份证号码错误");
		MandoAssert.isTrue(isMobile(userAddVo.getMobile()), RegistrationErrorEnums.REGIST_0001.getText());
		MandoAssert.isTrue(mapper.findUserMobile(userAddVo.getMobile()) == null, "手机号码已注册");
		MandoAssert.isTrue(mapper.findUserIdCard(userAddVo.getIdCard()) == null, "身份证号码已注册");
		User user = new User();
		user.setMobile(userAddVo.getMobile());
		user.setPassword(CommonUtils.encryption(userAddVo.getPassword()));
		user.setName(userAddVo.getRealname());
		user.setIdCard(userAddVo.getIdCard());
		user.setType(userAddVo.getType());
		user.setSource(FUXI);
		user.setAuthenticated(true);
		user.setRemark(userAddVo.getRemark());
		mapper.insert(user);
		//开通个人资金账户
	}

	
	@Override
	@Transactional
	public void addCompanyUser(UserAddEnterpriseVo userAddEnterpriseVo) {
		Assert.notNull(userAddEnterpriseVo.getCorporationCard(), "法人身份证号不能为空");
		MandoAssert.isTrue(userAddEnterpriseVo.getCompanyRole().size() > 0, "资金账户角色类型不能为空");
		Assert.notNull(userAddEnterpriseVo.getCompanyMobile(), "手机号不能为空");
		Assert.notNull(userAddEnterpriseVo.getCompanyPassword(), "登陆密码不能为空");
		Assert.notNull(userAddEnterpriseVo.getCompanyName(), "企业名称不能为空");
		Assert.notNull(userAddEnterpriseVo.getCreditCode(), "统一社会信用代码不能为空");
		Assert.notNull(userAddEnterpriseVo.getCorporation(), "企业法人不能为空");
		MandoAssert.isTrue(IdcardUtils.validateCard(userAddEnterpriseVo.getCorporationCard()), "身份证号码错误");
		MandoAssert.isTrue(isMobile(userAddEnterpriseVo.getCompanyMobile()), RegistrationErrorEnums.REGIST_0001.getText());
		MandoAssert.isTrue(mapper.findUserMobile(userAddEnterpriseVo.getCompanyMobile()) == null, "手机号码已注册");
		//企业用户注册
		User user = new User();
		user.setType(userAddEnterpriseVo.getType());
		user.setMobile(userAddEnterpriseVo.getCompanyMobile());
		user.setPassword(CommonUtils.encryption(userAddEnterpriseVo.getCompanyPassword()));
		user.setName(userAddEnterpriseVo.getCompanyName());
		user.setIdCard(userAddEnterpriseVo.getCreditCode());
		user.setAuthenticated(true);
		user.setSource(FUXI);
		user.setRemark(userAddEnterpriseVo.getCompanyRemark());
		mapper.insert(user);
		//企业详细信息添加
		this.addCompany(userAddEnterpriseVo);
		//开通企业资金账户
	}
	
	private void addCompany(UserAddEnterpriseVo userAddEnterpriseVo){
		CompanyMessage companyMessage = new CompanyMessage();
		companyMessage.setUserId(mapper.findUserMobile(userAddEnterpriseVo.getCompanyMobile()).getId());
		companyMessage.setName(userAddEnterpriseVo.getCorporation());
		companyMessage.setIdCard(userAddEnterpriseVo.getCorporationCard());
		companyMessage.setCompanyName(userAddEnterpriseVo.getCompanyName());
		companyMessage.setSocialCreditCode(userAddEnterpriseVo.getCreditCode());
		companyMessage.setIdCardUp(userAddEnterpriseVo.getImageIdCardFront());
		companyMessage.setIdCardDown(userAddEnterpriseVo.getImageIdCardContrary());
		companyMessage.setBusinessLicense(userAddEnterpriseVo.getImageLiense());
		companyMessage.setOpeningPermit(userAddEnterpriseVo.getImageAol());
		companyMessage.setCreditInstitutionCode(userAddEnterpriseVo.getImageCooc());
		companyMessage.setRemark(userAddEnterpriseVo.getCompanyRemark());
		companyMessageMapper.insert(companyMessage);
	}


	@Override
	public User findUserMobile(String mobile) {
		mapper.findUserMobile(mobile);
		return mapper.findUserMobile(mobile);
	}

}
