/**
 * 
 */
package com.zhonglian.fuxi.web.controller;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.zhonglian.douxin.commom.vo.UserAddEnterpriseVo;
import com.zhonglian.douxin.commom.vo.UserAddVo;
import com.zhonglian.douxin.common.enums.UserTypeEnums;
import com.zhonglian.fuxi.service.UserService;
import com.zhonglian.jinjufin.support.entity.JsonResult;
import com.zhonglian.jinjufin.support.exception.ResponseExceptionMessage;
import com.zhonglian.jinjufin.support.utils.MandoAssert;

/**
 * @author zhangshun
 *
 */
@Controller
@RequestMapping("user")
public class UserController {

	private static final Logger logger = LoggerFactory.getLogger(UserController.class);

	@Resource
	private UserService userService;

	/**
	 * 账户信息注册
	 *
	 * @param userAddVo
	 *            用户请求参数
	 * @param userAddEnterpriseVo
	 *            企业用户请求参数
	 *
	 * @return JsonResult
	 */
	@RequestMapping("addUser")
	@ResponseBody
	public JsonResult addUser(UserAddVo userAddVo, UserAddEnterpriseVo userAddEnterpriseVo) {
		MandoAssert.notNull(userAddVo.getType(), "账户类型不能为空");
		try {
			//个人账户代注册
			if(userAddVo.getType() != null && userAddVo.getType() == UserTypeEnums.INDIVIDUAL_ACCOUNT){
				userService.addUser(userAddVo);
			}
			//企业账户注册
			if(userAddEnterpriseVo.getType() != null && userAddEnterpriseVo.getType() == UserTypeEnums.CORPORATE_ACCOUNT){
				userService.addCompanyUser(userAddEnterpriseVo);
			}

			return JsonResult.buildResult(true, "添加成功");
		} catch (Exception e) {
			String mgs = "用户添加失败";
			return ResponseExceptionMessage.getResponseExceptionMessage(logger, mgs, e);
		}
	}
	/**
	 * 更新账户信息
	 * 
	 *@author zhangshun
	 * @return
	 */
	@RequestMapping("updateUser")
	@ResponseBody
	public JsonResult updateUser() {
		try {
			

			return JsonResult.buildResult(true, "修改成功");
		} catch (Exception e) {
			String mgs = "用户信息修改失败";
			return ResponseExceptionMessage.getResponseExceptionMessage(logger, mgs, e);
		}
	}
	/**
	 *根据手机号查询账户信息
	 *@author zhangshun
	 * @param moblie
	 * @return
	 */
	@RequestMapping("findMobile")
	@ResponseBody
	public JsonResult findMobile(String mobile) {
		MandoAssert.notNull(mobile, "手机号不能为空");
		try {
			return JsonResult.buildSuccessResult(userService.findUserMobile(mobile));
		} catch (Exception e) {
			String mgs = "查询账户信息失败";
			return ResponseExceptionMessage.getResponseExceptionMessage(logger, mgs, e);
		}
	}
	
}
